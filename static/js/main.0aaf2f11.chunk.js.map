{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Recipe","ingredients","this","props","map","ingredient","key","steps","step","id","title","React","Component","AddRecipe","state","handleRecipeTitleChange","bind","handleRecipeIngredientsChange","handleRecipeStepsChange","handleSubmit","handleCancel","e","setState","target","value","preventDefault","regExp","onAdd","split","onAddModal","onShow","regex2","regex3","validRecipe","test","Modal","show","onHide","Header","closeButton","Title","Body","FormGroup","controlId","FormLabel","FormControl","type","required","onChange","placeholder","Footer","Button","disabled","onClick","App","changeRecipe","showAdd","recipes","currentRecipe","showAddModal","addRecipe","localStorage","JSON","parse","getItem","recipeButton","recipeTitle","recipesByTitle","filter","recipe","length","push","setItem","stringify","className","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0aaf2f11.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {Modal,FormLabel,FormGroup,FormControl,Button} from 'react-bootstrap';\nimport './App.css';\n\nclass Recipe extends React.Component {\n  render() {\n    const ingredients = this.props.ingredients.map((ingredient, key) => <li key={key}>{ingredient} </li>);\n    const steps = this.props.steps.map((step, key) => <li key={key}>{step}</li>);\n    return (\n      <div id='recipeLayout'>\n        <h2>{this.props.title}</h2>\n        <h3>Ingredients</h3>\n        <div id='ingredientsList'>\n          <ul>{ingredients}</ul>\n        </div>\n        <h3>Steps</h3>\n        <div id='stepsList'>\n          <ol>{steps}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass AddRecipe extends React.Component {\n  constructor(props) {//create a state to handle the new recipe\n    super(props);\n    this.state = {title: \"\", ingredients: \"\", steps: \"\"};\n    this.handleRecipeTitleChange = this.handleRecipeTitleChange.bind(this);\n    this.handleRecipeIngredientsChange = this.handleRecipeIngredientsChange.bind(this);\n    this.handleRecipeStepsChange = this.handleRecipeStepsChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\t  this.handleCancel = this.handleCancel.bind(this);\n  }\n  handleRecipeTitleChange(e) {//change the name to reflect user input\n    this.setState({title: e.target.value});\n  }\n  handleRecipeIngredientsChange(e) {//change the ingredients to reflect user input\n    this.setState({ingredients: e.target.value});\n  }\n  handleRecipeStepsChange(e) {\n    this.setState({steps: e.target.value});\n  }\n  handleSubmit(e) {//get the recipe data, manipulate it and call the function for creating a new recipe\n    e.preventDefault();\n    const onAdd = this.props.onAdd;\n    const regExp = /\\s*,\\s*/;\n    var newTitle = this.state.title;\n    var newIngredients = this.state.ingredients.split(regExp);\n    var newSteps = this.state.steps.split(regExp);\n    var newRecipe = {title: newTitle, ingredients: newIngredients, steps: newSteps};\n    onAdd(newRecipe);\n    this.setState({title: \"\", ingredients: \"\", steps: \"\"});\n  }\n  handleCancel() {\n    const onAddModal = this.props.onAddModal;\n    this.setState({title: \"\", ingredients: \"\", steps: \"\"});\n    onAddModal();\n  }\n  render() {\n    const onShow = this.props.onShow;\n    var regex1 = /^\\S/;\n    var regex2 = /^[^,\\s]/;\n\t  var regex3 = /[^,\\s]$/;\n    const validRecipe = regex1.test(this.state.title) && regex2.test(this.state.ingredients) && regex3.test(this.state.ingredients) && regex2.test(this.state.steps) && regex3.test(this.state.steps);\n    return(\n      <Modal show={onShow} onHide={this.handleCancel}>\n        <Modal.Header closeButton>\n          <Modal.Title>Create New Recipe</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <FormGroup controlId=\"formControlsName\">\n            <FormLabel>Recipe Title</FormLabel>\n            <FormControl type=\"text\" required onChange={this.handleRecipeTitleChange} value={this.state.title} placeholder=\"Enter Title\" />\n          </FormGroup>\n          <FormGroup controlId=\"formControlsIngredients\">\n            <FormLabel>Recipe Ingredients</FormLabel>\n            <FormControl type=\"text\" required onChange={this.handleRecipeIngredientsChange} value={this.state.ingredients} placeholder=\"Enter Ingredients(separate by commas)\" />\n          </FormGroup>\n          <FormGroup controlId=\"formControlsSteps\">\n            <FormLabel>Recipe Steps</FormLabel>\n            <FormControl type=\"text\" required onChange={this.handleRecipeStepsChange} value={this.state.steps} placeholder=\"Enter Steps(separate by commas)\" />\n          </FormGroup>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button disabled={!validRecipe} onClick={this.handleSubmit}>Save Recipe</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.changeRecipe = this.changeRecipe.bind(this);\n    this.state = {\n      showAdd: false,\n      recipes: [],\n      currentRecipe: null\n    };\n    \n    this.showAddModal = this.showAddModal.bind(this);\n    this.addRecipe = this.addRecipe.bind(this);\n  }\n  \n  componentDidMount() {//load the local storage data after the component renders\n    var recipes = (typeof localStorage[\"recipes\"] !== \"undefined\") ? JSON.parse(localStorage.getItem(\"recipes\")) : [\n      {\n        title: 'Salsa',\n        ingredients: [\n          '2 14oz (or 1 26oz) can(s) diced tomatoes',\n          '1 small can tomato sauce',\n          '1 can El pato duck sauce',\n          '1/2 chopped onion',\n          'Chopped cilantro',\n          'Garlic salt'\n        ],\n        steps: [\n          'Mix tomatoes, tomato sauce, and El pato into medium bowl',\n          'Mix in onions, cilantro, and garlic salt into bowl',\n          'Serve with tortilla chips'\n        ]\n      },\n      {\n        title: 'Banana Bread',\n        ingredients: [\n          '2 eggs',\n          '1/2 cup sugar',\n          '1 cup sour cream',\n          '1 teaspoon soda',\n          '1/4 teaspoon salt',\n          '1 cup mashed bananas',\n          '2 cups flour',\n          '1 teaspoon baking powder',\n          'Nuts'\n        ],\n        steps: [\n          'Mix ingredients into baking bowl',\n          'Bake at 350 degrees for 50-55 minutes',\n          'Mixture makes one medium loaf'\n        ]\n      },\n      {\n        title: 'Mini Caramel Rolls',\n        ingredients: [\n          '1/3 cup packed brown sugar',\n          '1/3 cup cubed butter',\n          '2 tablespoons light corn syrup',\n          '1-1/2 teaspoons 2% milk',\n          '1 tube (8oz) refrigerated crescent rolls',\n          '2 teaspoons Imperial Sugar / Dixie Crystals Granulated Sugar',\n          '1/2 teaspoon ground cinnamon'\n        ],\n        steps: [\n          'Combine brown sugar, butter, corn syrup, and milk into small saucepan',\n          'Cook and stir over medium heat until butter melts and sugar is dissolved',\n          'Pour mix into greased 9 inch pie plate',\n          'Separate crescent dough into four rectangles and gently press to seal',\n          'Combine sugar and cinnamon into a small bowl and sprinkle over rectangles',\n          'Roll up rectangles jelly-style starting with the long side and pinch seams to seal',\n          'Cut each rectangles into nine slices and place cut side down in ready pie plate',\n          'Bake at 375 degrees for 15-18 minutes or until golden',\n          'Let cool in pie plate for 1 minute before flipping onto serving plate',\n          'This recipe yields 12 rolls'\n        ]\n      },\n      {\n        title: 'Buttermilk-Pineapple Carrot Cake',\n        ingredients: [\n          '2 cups all-purpose flour',\n          '2 cups sugar',\n          '2 teaspoons baking soda',\n          '1-1/2 teaspoons ground cinnamon',\n          '1 teaspoon baking powder',\n          '1/4 teaspoon salt',\n          '2 cups finely shredded carrots',\n          '1/4 cup buttermilk or sour milk',\n          '1/4 cup cooking oil',\n          '1 8-1/4oz can crushed pineapple, drained',\n          '1 cup chopped walnuts',\n          '3 eggs',\n          '1/2 cup coconut',\n          '1 teaspoon vanilla',\n          '1 recipe Buttermilk Glaze',\n          '1 recipe Cream Cheese Frosting',\n          '1/2 cup chopped walnuts (topping)'\n        ],\n        steps: [\n          'Grease 13x9x2 inch baking pan or grease and flour two 9x1-1/2 inch round baking pans',\n          'Combine flour, sugar, baking soda, cinnamon, baking powder, and salt in a large mixing bowl',\n          'Add shredded carrots, buttermilk or sour milk, cooking oil, drained pineapple, 1 cup nuts, eggs, coconut, and vanilla',\n          'Stir until combined and spread into baking pan(s)',\n          'Bake at 350 degrees for 40-45 minutes or until cake springs when touched',\n          'Combine 1/2 cup sugar, 1/4 cup buttermilk or sour milk, 1/4 cup butter, and 2 teaspoons light-colored corn syrup in a medium saucepan',\n          'Bring mixture to boiling',\n          'Cook and stir mixture for 4 minutes',\n          'Remove saucepan from heat and stir in vanilla to create Buttermilk Glaze',\n          'Pour Buttermilk Glaze over top of cake',\n          'Cool layers of cake in pans on wire rack for 15 minutes',\n          'Remove cakes and cool on racks',\n          'Frost with Cream Cheese Frosting and sprinkle with 1/2 cup of nuts'\n        ]\n      },\n      {\n        title: 'Cream Cheese Frosting',\n        ingredients: [\n          '8oz cream cheese',\n          '1/4 cup butter',\n          '1 teaspoon vanilla',\n          '1 16oz package (4 cups) powdered sugar'\n        ],\n        steps: [\n          'Mix ingredients at room temperature into small bowl',\n          'Put in refrigerator overnight to let cool',\n          'Spread on your favorite dessert'\n        ]\n      },\n      {\n        title: 'Crab Dip',\n        ingredients: [\n          '1 8oz package softened cream cheese',\n          '1/2 cup mayonnaise',\n          '1/2 cup sliced green onion',\n          '1/2 cup chopped celery',\n          '2 tablespoons lemon juice',\n          '1 package (8oz) crab meat, chopped',\n        ],\n        steps: [\n          'Mix ingredients together in serving bowl',\n          'Chill several hours in refrigerator',\n          'Serve and enjoy'\n        ]\n      }\n    ];\n    this.setState({recipes: recipes});\n  }\n  \n  changeRecipe(recipeButton) {\n    const recipeTitle = recipeButton.target.id.split('_')[0];\n    const recipesByTitle = this.state.recipes.filter((recipe) => recipe.title === recipeTitle);\n    if (recipesByTitle.length > 0)\n    {\n      this.setState({\n        currentRecipe: recipesByTitle[0]\n      });\n    }\n  }\n  \n  showAddModal() {//show the new recipe modal\n    this.setState({showAdd: !this.state.showAdd});\n  }\n  \n  addRecipe(recipe) {//create a new recipe\n    let recipes = this.state.recipes;\n    recipes.push(recipe);\n    localStorage.setItem('recipes', JSON.stringify(recipes));\n    this.setState({recipes: recipes});\n    this.showAddModal();\n  }\n  \n  render() {\n    let currentRecipe = this.state.currentRecipe;\n    \n    return (\n      <div id='recipeApp'>\n        <div id='recipeSideNav'>\n          <h2>Recipe Book</h2>\n          <ul id='recipeBookList'>\n            {\n              this.state.recipes.map((recipe) =>\n                <li key={recipe.title}>\n                  <button\n                    id={recipe.title + '_button'}\n                    onClick={this.changeRecipe}\n                    className='recipeBookButton'\n                  >\n                  {recipe.title}\n                  </button>\n                </li>\n              )\n            }\n          </ul>\n          \n        <Button onClick={this.showAddModal}>Add Recipe</Button>\n        <button onClick={() => localStorage.clear()}>Delete Recipes</button>\n        \n        </div>\n        <div id='recipeMainContent'>\n          {\n            currentRecipe ?\n            <Recipe\n              ingredients={currentRecipe.ingredients}\n              steps={currentRecipe.steps}\n              title={currentRecipe.title}\n            />\n            : null\n          }\n        </div>\n        <AddRecipe onShow={this.state.showAdd} onAdd={this.addRecipe} onAddModal={this.showAddModal} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}